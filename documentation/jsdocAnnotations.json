[
    {
        "name": "cy.add",
        "descr": "Add elements to the graph and return them",
        "formats": [
            {
                "descr": "Add a specified element to the graph.",
                "args": [
                    {
                        "name": "eleObj",
                        "descr": "A plain object that specifies the element."
                    }
                ]
            },
            {
                "descr": "Add the specified elements to the graph.",
                "args": [
                    {
                        "name": "eleObjs",
                        "descr": "An array of elements specified by plain objects."
                    }
                ]
            },
            {
                "descr": "Add the specified elements to the graph.",
                "args": [
                    {
                        "name": "eles",
                        "descr": "A collection of elements."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.remove",
        "descr": "Remove elements from the graph and return them.",
        "formats": [
            {
                "descr": "Remove the specified elements.",
                "args": [
                    {
                        "name": "eles",
                        "descr": "A collection of elements to remove."
                    }
                ]
            },
            {
                "descr": "Remove elements in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "Elements matching this selector are removed."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.destroyed",
        "descr": "Get whether the instance of Cytoscape.js has been destroyed or not."
    },
    {
        "name": "cy.ready",
        "formats": [
            {
                "descr": "Run a callback as soon as the graph becomes ready (i.e. intitial data loaded and initial layout completed).  If the graph is already ready, then the callback is called immediately.  If data is loaded synchronously and the layout used is discrete/synchronous/unanimated/unspecified, then you don't need `cy.ready()`.",
                "args": [
                    {
                        "name": "function(event)",
                        "fields": [
                            {
                                "name": "event",
                                "descr": "The `ready` event."
                            }
                        ],
                        "descr": "The callback run as soon as the graph is ready."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.destroy",
        "descr": "A convenience function to explicitly destroy the instance."
    },
    {
        "name": "cy.getElementById",
        "pureAliases": [
            "cy.$id"
        ],
        "descr": "Get an element from its ID in a very performant way",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "id",
                        "descr": "The ID of the element to get."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.container",
        "descr": "Get the HTML DOM element in which the graph is visualised. A null value is returned if the instance is headless."
    },
    {
        "name": "cy.mount",
        "descr": "Attaches the instance to the specified container for visualisation.",
        "formats": [
            {
                "descr": "To mount",
                "args": [
                    {
                        "name": "container",
                        "descr": "A HTML DOM element in which the graph should be rendered."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.unmount",
        "descr": "Remove the instance from its current container."
    },
    {
        "name": "cy.layout",
        "pureAliases": [
            "cy.createLayout",
            "cy.makeLayout"
        ],
        "descr": "Get a new layout, which can be used to algorithmically position the nodes in the graph",
        "formats": [
            {
                "descr": "Get layouts",
                "args": [
                    {
                        "name": "options",
                        "descr": "The layout options."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.batch",
        "descr": "Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.",
        "formats": [
            {
                "name": "cy.batch",
                "descr": "callback",
                "args": [
                    {
                        "name": "function()",
                        "descr": "A callback within which you can make batch updates to elements."
                    }
                ]
            },
            {
                "name": "cy.startBatch",
                "descr": "Starts batching manually (useful for asynchronous cases)."
            },
            {
                "name": "cy.endBatch",
                "descr": "Ends batching manually (useful for asynchronous cases)."
            }
        ]
    },
    {
        "name": "cy.style",
        "descr": "Get the entry point to modify the visual style of the graph after initialisation.",
        "formats": [
            {
                "descr": "Get the current style object."
            },
            {
                "descr": "Assign a new stylesheet to replace the existing one.",
                "args": [
                    {
                        "name": "stylesheet",
                        "descr": "Either a `cytoscape.stylesheet()` object, a string stylesheet, or a JSON stylesheet (the same formats accepted for [`options.style`](#style) at initialisation)."
                    }
                ]
            }
        ]
    }
]