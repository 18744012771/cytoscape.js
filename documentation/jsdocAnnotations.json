[
    {
        "name": "eles.classes",
        "pureAliases": [
            "eles.className",
            "eles.classNames"
        ],
        "descr": "Get or replace the current list of classes on the elements with the specified list.",
        "formats": [
            {
                "name": "ele.classes",
                "descr": "Get the list of classes as an array for the element."
            },
            {
                "name": "eles.classes",
                "descr": "Replace the list of classes for all elements in the collection.",
                "args": [
                    {
                        "name": "classes",
                        "descr": "An array (or a space-separated string) of class names that replaces the current class list."
                    }
                ]
            }
        ],
        "md": "collection/classes"
    },
    {
        "name": "eles.addClass",
        "descr": "Add classes to elements.  The classes should be specified in the [stylesheet](#style) in order to have an effect on the rendered style of the elements.",
        "formats": [
            {
                "descr": "Adding Class",
                "args": [
                    {
                        "name": "classes",
                        "descr": "An array (or a space-separated string) of class names to add to the elements."
                    }
                ]
            }
        ],
        "md": "collection/addClass"
    },
    {
        "name": "eles.hasClass",
        "descr": "Get whether an element has a particular class.",
        "formats": [
            {
                "descr": "Adding Class",
                "args": [
                    {
                        "name": "className",
                        "descr": "The name of the class to test for."
                    }
                ]
            }
        ],
        "md": "collection/hasClass"
    },
    {
        "name": "eles.toggleClass",
        "descr": "Toggle whether the elements have the specified classes.  The classes should be specified in the [stylesheet](#style) in order to have an effect on the rendered style of the elements.",
        "formats": [
            {
                "descr": "Toggle Event",
                "args": [
                    {
                        "name": "classes",
                        "descr": "An array (or a space-separated string) of class names to toggle on the elements."
                    },
                    {
                        "name": "toggle",
                        "descr": "Instead of automatically toggling, adds the classes on truthy values or removes them on falsey values.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/toggleClass"
    },
    {
        "name": "eles.removeClass",
        "descr": "Remove classes from elements.  The classes should be specified in the [stylesheet](#style) in order to have an effect on the rendered style of the elements.",
        "formats": [
            {
                "descr": "Adding Class",
                "args": [
                    {
                        "name": "classes",
                        "descr": "An array (or a space-separated string) of class names to add to the elements."
                    }
                ]
            }
        ],
        "md": "collection/removeClass"
    },
    {
        "name": "eles.flashClass",
        "descr": "Add classes to the elements, and then remove the classes after a specified duration.",
        "formats": [
            {
                "descr": "flash Event",
                "args": [
                    {
                        "name": "classes",
                        "descr": "An array (or a space-separated string) of class names to flash on the elements."
                    },
                    {
                        "name": "duration",
                        "descr": "The duration in milliseconds that the classes should be added on the elements. After the duration, the classes are removed.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/flashClass"
    },
    {
        "name": "eles.allAre",
        "descr": "Determine whether all elements in the collection match a selector.",
        "formats": [
            {
                "descr": "Matching Selector",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector to match against."
                    }
                ]
            }
        ],
        "md": "collection/allAre"
    },
    {
        "name": "eles.is",
        "descr": "Determine whether any element in this collection matches a selector.",
        "formats": [
            {
                "descr": "Matching Selector",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector to match against."
                    }
                ]
            }
        ],
        "md": "collection/is"
    },
    {
        "name": "eles.some",
        "descr": "Determine whether any element in this collection satisfies the specified test function.",
        "formats": [
            {
                "descr": "Listen to events that bubble up from elements matching the specified node selector:",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The event object."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being tested."
                            }
                        ],
                        "descr": "The test function that returns truthy values for elements that satisfy the test and falsey values for elements that do not satisfy the test."
                    },
                    {
                        "name": "thisArg",
                        "descr": "The value for `this` within the test function.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/some"
    },
    {
        "name": "eles.every",
        "descr": "Determine whether all elements in this collection satisfy the specified test function.",
        "formats": [
            {
                "descr": "Determine test function",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The event object."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being tested."
                            }
                        ],
                        "descr": "The test function that returns truthy values for elements that satisfy the test and falsey values for elements that do not satisfy the test."
                    },
                    {
                        "name": "thisArg",
                        "descr": "The value for `this` within the test function.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/every"
    },
    {
        "name": "eles.same",
        "descr": "Determine whether this collection contains exactly the same elements as another collection.",
        "formats": [
            {
                "descr": "Determine same collection",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The other elements to compare to."
                    }
                ]
            }
        ],
        "md": "collection/same"
    },
    {
        "name": "eles.anySame",
        "descr": "Determine whether this collection contains any of the same elements as another collection.",
        "formats": [
            {
                "descr": "Determine any same collection",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The other elements to compare to."
                    }
                ]
            }
        ],
        "md": "collection/anySame"
    },
    {
        "name": "eles.allAreNeighbors",
        "pureAliases": [
            "eles.allAreNeighbours"
        ],
        "descr": "Determine whether all elements in the specified collection are in the neighbourhood of the calling collection.",
        "formats": [
            {
                "descr": "Determine neighbourhood collection",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The other elements to compare to."
                    }
                ]
            }
        ],
        "md": "collection/allAreNeighbors"
    },
    {
        "name": "eles.contains",
        "pureAliases": [
            "eles.has"
        ],
        "descr": "Determine whether this collection contains all of the elements of another collection.",
        "formats": [
            {
                "descr": "Determine another collection",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The other elements to compare to."
                    }
                ]
            }
        ],
        "md": "collection/contains"
    },
    {
        "name": "nodes.parent",
        "descr": "Get the compound parent node of each node in the collection.",
        "formats": [
            {
                "descr": "Get Parent Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.commonAncestors",
        "descr": "Get all compound ancestors common to all the nodes in the collection, starting with the closest and getting progressively farther.",
        "formats": [
            {
                "descr": "Get commonAncestors Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/commonAncestors"
    },
    {
        "name": "nodes.orphans",
        "descr": "Get all orphan (i.e. has no compound parent) nodes in the calling collection.",
        "formats": [
            {
                "descr": "Get orphans Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.nonorphans",
        "descr": "Get all nonorphan (i.e. has no compound parent) nodes in the calling collection.",
        "formats": [
            {
                "descr": "Get nonorphans Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.children",
        "descr": "Get all compound child (i.e. direct descendant) nodes of each node in the collection.",
        "formats": [
            {
                "descr": "Get children Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.siblings",
        "descr": "Get all sibling (i.e. same compound parent) nodes of each node in the collection.",
        "formats": [
            {
                "descr": "Get siblings Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.isParent",
        "descr": "Get whether the node is a compound parent (i.e. a node containing one or more child nodes)"
    },
    {
        "name": "nodes.isChildless",
        "descr": "Get whether the node is childless (i.e. a node with no child nodes)"
    },
    {
        "name": "nodes.isChild",
        "descr": "Get whether the node is a compound child (i.e. contained within a node)"
    },
    {
        "name": "nodes.isOrphan",
        "descr": "Get whether the node is an orphan (i.e. a node with no parent)"
    },
    {
        "name": "nodes.descendants",
        "descr": "Get all compound descendant (i.e. children, children's children, etc.) nodes of each node in the collection.",
        "formats": [
            {
                "descr": "Get descendants Node.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.absoluteComplement",
        "pureAliases": [
            "eles.abscomp",
            "eles.complement"
        ],
        "descr": "Get all elements in the graph that are not in the calling collection.",
        "md": "collection/absoluteComplement"
    },
    {
        "name": "eles.diff",
        "descr": "Perform a traditional left/right diff on the two collections.",
        "formats": [
            {
                "descr": "diff Event",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The elements on the right side of the diff."
                    }
                ]
            },
            {
                "descr": "diff Event",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector representing the elements on the right side of the diff. All elements in the graph matching the selector are used as the passed collection."
                    }
                ]
            }
        ],
        "md": "collection/diff"
    },
    {
        "name": "eles.unmerge",
        "descr": "Perform an in-place operation on the calling collection to remove the given elements.",
        "formats": [
            {
                "descr": "unmerge Event",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The elements to remove in-place."
                    }
                ]
            },
            {
                "descr": "unmerge Event",
                "args": [
                    {
                        "name": "selector",
                        "descr": "A selector representing the elements to remove. All elements in the graph matching the selector are used as the passed collection."
                    }
                ]
            }
        ],
        "md": "collection/unmerge"
    },
    {
        "name": "eles.map",
        "descr": "Get an array containing values mapped from the collection.",
        "formats": [
            {
                "descr": "Determine test function",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The current element."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being mapped."
                            }
                        ],
                        "descr": "The function that returns the mapped value for each element."
                    },
                    {
                        "name": "thisArg",
                        "descr": "The value for `this` within the iterating function.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/map"
    },
    {
        "name": "eles.reduce",
        "descr": "Reduce a single value by applying a function against an accumulator and each value of the collection.",
        "formats": [
            {
                "descr": "Determine reduce function",
                "args": [
                    {
                        "name": "function(prevVal,ele,i,eles)",
                        "fields": [
                            {
                                "name": "prevVal",
                                "descr": "The value accumulated from previous elements."
                            },
                            {
                                "name": "ele",
                                "descr": "The current element."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being reduced."
                            }
                        ],
                        "descr": "The function that returns the accumulated value given the previous value and the current element."
                    }
                ]
            }
        ],
        "md": "collection/reduce"
    },
    {
        "name": "eles.max",
        "descr": "Find a maximum value and the corresponding element.",
        "formats": [
            {
                "descr": "Determine max function",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The current element."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being searched."
                            }
                        ],
                        "descr": "The function that returns the value to compare for each element."
                    },
                    {
                        "name": "thisArg",
                        "descr": "The value for `this` within the iterating function.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/max"
    },
    {
        "name": "eles.min",
        "descr": "Find a minimum value and the corresponding element.",
        "formats": [
            {
                "descr": "Determine min function",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The current element."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being searched."
                            }
                        ],
                        "descr": "The function that returns the value to compare for each element."
                    },
                    {
                        "name": "thisArg",
                        "descr": "The value for `this` within the iterating function.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/min"
    },
    {
        "name": "nodes.isNode",
        "descr": "Get whether the element is a node."
    },
    {
        "name": "nodes.isEdge",
        "descr": "Get whether the element is an edge."
    },
    {
        "name": "nodes.isLoop",
        "descr": "Get whether the edge is a loop (i.e. same source and target)."
    },
    {
        "name": "nodes.isSimple",
        "descr": "Get whether the edge is simple (i.e. different source and target)."
    },
    {
        "name": "nodes.group",
        "descr": "Get the group string that defines the type of the element.",
        "md": "collection/group"
    },
    {
        "name": "eles.forEach",
        "pureAliases": [
            "eles.each"
        ],
        "descr": "Iterate over the elements in the collection.",
        "formats": [
            {
                "descr": "Determine forEach function",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The current element."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current element."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being searched."
                            }
                        ],
                        "descr": "The function executed each iteration."
                    },
                    {
                        "name": "thisArg",
                        "descr": "The value for `this` within the iterating function.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/forEach"
    },
    {
        "name": "nodes.toArray",
        "descr": "Get the collection as an array, maintaining the order of the elements."
    },
    {
        "name": "eles.slice",
        "descr": "Get a subset of the elements in the collection based on specified indices.",
        "formats": [
            {
                "descr": "Slice",
                "args": [
                    {
                        "name": "start",
                        "descr": "An integer that specifies where to start the selection. The first element has an index of 0. Use negative numbers to select from the end of an array.",
                        "optional": true
                    },
                    {
                        "name": "end",
                        "descr": "An integer that specifies where to end the selection. If omitted, all elements from the start position and to the end of the array will be selected. Use negative numbers to select from the end of an array.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "eles.size",
        "descr": "Get the number of elements in the collection.",
        "md": "collection/size"
    },
    {
        "name": "eles.eq",
        "descr": "Get an element at a particular index in the collection.",
        "formats": [
            {
                "name": "eles.eq",
                "descr": "Get the index of the element.",
                "args": [
                    {
                        "name": "index",
                        "descr": "The index of the element to get."
                    }
                ]
            },
            {
                "name": "eles.first",
                "descr": "Get the first element in the collection."
            },
            {
                "name": "eles.last",
                "descr": "Get the last element in the collection."
            }
        ],
        "md": "collection/eq"
    },
    {
        "name": "eles.empty",
        "descr": "Get whether the collection is empty, meaning it has no elements.",
        "formats": [
            {
                "name": "eles.empty",
                "descr": "Get whether the collection is empty."
            },
            {
                "name": "eles.nonempty",
                "descr": "Get whether the collection is nonempty."
            }
        ]
    },
    {
        "name": "eles.sort",
        "descr": "Get a new collection containing the elements sorted by the specified comparison function.",
        "formats": [
            {
                "descr": "The sorting comparison function.",
                "args": [
                    {
                        "name": "function(ele1,ele2)",
                        "descr": "Get a new collection containing the elements sorted by the specified comparison function."
                    }
                ]
            }
        ],
        "md": "collection/sort"
    },
    {
        "name": "node.layoutDimensions",
        "extFn": "true",
        "descr": "Get the node width and height. This function is intended for use in layout positioning to do overlap detection.",
        "formats": [
            {
                "descr": "The node layoutDimensionsing function.",
                "args": [
                    {
                        "name": "options",
                        "descr": "The layout options object."
                    }
                ]
            }
        ],
        "md": "collection/layoutDimensions"
    },
    {
        "name": "nodes.layoutPositions",
        "extFn": "true",
        "descr": "Position the nodes for a discrete/synchronous layout.",
        "formats": [
            {
                "descr": "Position the nodes.",
                "args": [
                    {
                        "name": "layout",
                        "descr": "The layout."
                    },
                    {
                        "name": "options",
                        "descr": "The layout options object."
                    },
                    {
                        "name": "function(ele,i)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The node being iterated over for which the function should return a position to set."
                            },
                            {
                                "name": "i",
                                "descr": "The index of the current node while iterating over the nodes in the layout."
                            }
                        ],
                        "descr": "A function that returns the new position for the specified node."
                    }
                ]
            }
        ],
        "md": "collection/layoutPositions"
    },
    {
        "name": "eles.layout",
        "pureAliases": [
            "eles.createLayout",
            "eles.makeLayout"
        ],
        "descr": "Get a new layout, which can be used to algorithmically position the nodes in the collection.",
        "formats": [
            {
                "descr": "The layouting comparison function.",
                "args": [
                    {
                        "name": "options",
                        "descr": "The layout options."
                    }
                ]
            }
        ],
        "md": "collection/layout"
    },
    {
        "name": "ele.numericStyle",
        "descr": "Get the numeric value of a style property in preferred units that can be used for calculations.",
        "formats": [
            {
                "descr": "The numericStyle function.",
                "args": [
                    {
                        "name": "name",
                        "descr": "The name of the style property to get."
                    }
                ]
            }
        ],
        "md": "collection/numericStyle"
    },
    {
        "name": "ele.numericStyleUnits",
        "descr": "Get the units that `ele.numericStyle()` is expressed in, for a particular property.",
        "formats": [
            {
                "descr": "The numericStyleUnits function.",
                "args": [
                    {
                        "name": "name",
                        "descr": "The name of the style property to get."
                    }
                ]
            }
        ],
        "md": "collection/numericStyleUnits"
    },
    {
        "name": "eles.style",
        "pureAliases": [
            "eles.css"
        ],
        "formatsSameFn": "true",
        "descr": "Get or override the style of the element.",
        "formats": [
            {
                "name": "ele.style",
                "descr": "Get a name-value pair object containing visual style properties and their values for the element."
            },
            {
                "name": "ele.style",
                "descr": "Get a particular style property value.",
                "args": [
                    {
                        "name": "name",
                        "descr": "The name of the visual style property to get."
                    }
                ]
            },
            {
                "name": "eles.style",
                "descr": "Set a particular style property value.",
                "args": [
                    {
                        "name": "name",
                        "descr": "The name of the visual style property to set."
                    },
                    {
                        "name": "value",
                        "descr": "The value of the visual style property to set."
                    }
                ]
            },
            {
                "name": "eles.style",
                "descr": "Set several particular style property values.",
                "args": [
                    {
                        "name": "obj",
                        "descr": "An object of style property name-value pairs to set."
                    }
                ]
            },
            {
                "name": "eles.removeStyle",
                "descr": "Remove all style overrides."
            },
            {
                "name": "eles.removeStyle",
                "descr": "Remove specific style overrides.",
                "args": [
                    {
                        "name": "names",
                        "descr": "A space-separated list of property names to remove overrides."
                    }
                ]
            }
        ],
        "md": "collection/style"
    },
    {
        "name": "ele.effectiveOpacity",
        "descr": "Get the effective opacity of the element (i.e. on-screen opacity), which takes into consideration parent node opacity."
    },
    {
        "name": "ele.transparent",
        "descr": "Get whether the element's effective opacity is completely transparent, which takes into consideration parent node opacity."
    },
    {
        "name": "nodes.roots",
        "descr": "From the set of calling nodes, get the nodes which are roots (i.e. no incoming edges, as in a directed acyclic graph).",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.leaves",
        "descr": "From the set of calling nodes, get the nodes which are leaves (i.e. no outgoing edges, as in a directed acyclic graph).",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ]
    },
    {
        "name": "nodes.outgoers",
        "descr": "Get edges (and their targets) coming out of the nodes in the collection.",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/outgoers"
    },
    {
        "name": "nodes.successors",
        "descr": "Recursively get edges (and their targets) coming out of the nodes in the collection (i.e. the outgoers, the outgoers' outgoers, ...).",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/successors"
    },
    {
        "name": "nodes.incomers",
        "descr": "Get edges (and their sources) coming into the nodes in the collection.",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/incomers"
    },
    {
        "name": "nodes.predecessors",
        "descr": "Recursively get edges (and their sources) coming into the nodes in the collection (i.e. the incomers, the incomers' incomers, ...).",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/predecessors"
    },
    {
        "name": "edge.source",
        "descr": "Get source node of this edge.",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/source"
    },
    {
        "name": "edge.target",
        "descr": "Get target node of this edge.",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/target"
    },
    {
        "name": "edge.sources",
        "descr": "Get source nodes connected to the edges in the collection.",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/sources"
    },
    {
        "name": "edge.targets",
        "descr": "Get target nodes connected to the edges in the collection.",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "selector",
                        "descr": "An optional selector that is used to filter the resultant collection.",
                        "optional": true
                    }
                ]
            }
        ],
        "md": "collection/targets"
    },
    {
        "name": "cy.add",
        "descr": "Add elements to the graph and return them",
        "formats": [
            {
                "descr": "Add a specified element to the graph.",
                "args": [
                    {
                        "name": "eleObj",
                        "descr": "A plain object that specifies the element."
                    }
                ]
            },
            {
                "descr": "Add the specified elements to the graph.",
                "args": [
                    {
                        "name": "eleObjs",
                        "descr": "An array of elements specified by plain objects."
                    }
                ]
            },
            {
                "descr": "Add the specified elements to the graph.",
                "args": [
                    {
                        "name": "eles",
                        "descr": "A collection of elements."
                    }
                ]
            }
        ],
        "md": "cy/add"
    },
    {
        "name": "cy.remove",
        "descr": "Remove elements from the graph and return them.",
        "formats": [
            {
                "descr": "Remove the specified elements.",
                "args": [
                    {
                        "name": "eles",
                        "descr": "A collection of elements to remove."
                    }
                ]
            },
            {
                "descr": "Remove elements in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "Elements matching this selector are removed."
                    }
                ]
            }
        ],
        "md": "cy/remove"
    },
    {
        "name": "cy.destroyed",
        "descr": "Get whether the instance of Cytoscape.js has been destroyed or not."
    },
    {
        "name": "cy.ready",
        "formats": [
            {
                "descr": "Run a callback as soon as the graph becomes ready (i.e. intitial data loaded and initial layout completed).  If the graph is already ready, then the callback is called immediately.  If data is loaded synchronously and the layout used is discrete/synchronous/unanimated/unspecified, then you don't need `cy.ready()`.",
                "args": [
                    {
                        "name": "function(event)",
                        "fields": [
                            {
                                "name": "event",
                                "descr": "The `ready` event."
                            }
                        ],
                        "descr": "The callback run as soon as the graph is ready."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.destroy",
        "descr": "A convenience function to explicitly destroy the instance.",
        "md": "cy/destroy"
    },
    {
        "name": "cy.getElementById",
        "pureAliases": [
            "cy.$id"
        ],
        "descr": "Get an element from its ID in a very performant way",
        "formats": [
            {
                "descr": "Get ID",
                "args": [
                    {
                        "name": "id",
                        "descr": "The ID of the element to get."
                    }
                ]
            }
        ],
        "md": "cy/getElementById"
    },
    {
        "name": "cy.container",
        "descr": "Get the HTML DOM element in which the graph is visualised. A null value is returned if the instance is headless."
    },
    {
        "name": "cy.mount",
        "descr": "Attaches the instance to the specified container for visualisation.",
        "formats": [
            {
                "descr": "To mount",
                "args": [
                    {
                        "name": "container",
                        "descr": "A HTML DOM element in which the graph should be rendered."
                    }
                ]
            }
        ],
        "md": "cy/mount"
    },
    {
        "name": "cy.unmount",
        "descr": "Remove the instance from its current container.",
        "md": "cy/unmount"
    },
    {
        "name": "cy.json",
        "descr": "Import or export the graph in the same JSON format used at initialisation.",
        "formats": [
            {
                "descr": "Export the graph as JSON.",
                "args": [
                    {
                        "name": "flatEles",
                        "descr": "Whether the resulant JSON should include the elements as a flat array (`true`) or as two keyed arrays by group (`false`, default)."
                    }
                ]
            },
            {
                "descr": "Import the graph as JSON, updating only the fields specified.",
                "args": [
                    {
                        "name": "cyJson",
                        "descr": "The object with the fields corresponding to the states that should be changed."
                    }
                ]
            }
        ],
        "md": "cy/json"
    },
    {
        "name": "cy.layout",
        "pureAliases": [
            "cy.createLayout",
            "cy.makeLayout"
        ],
        "descr": "Get a new layout, which can be used to algorithmically position the nodes in the graph",
        "formats": [
            {
                "descr": "Get layouts",
                "args": [
                    {
                        "name": "options",
                        "descr": "The layout options."
                    }
                ]
            }
        ],
        "md": "cy/layout"
    },
    {
        "name": "cy.batch",
        "descr": "Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.",
        "formats": [
            {
                "name": "cy.batch",
                "descr": "callback",
                "args": [
                    {
                        "name": "function()",
                        "descr": "A callback within which you can make batch updates to elements."
                    }
                ]
            },
            {
                "name": "cy.startBatch",
                "descr": "Starts batching manually (useful for asynchronous cases)."
            },
            {
                "name": "cy.endBatch",
                "descr": "Ends batching manually (useful for asynchronous cases)."
            }
        ],
        "md": "cy/batch"
    },
    {
        "name": "cy.collection",
        "descr": "Return a new, empty collection.",
        "formats": [
            {
                "descr": "Get an empty collection."
            }
        ],
        "md": "cy/collection"
    },
    {
        "name": "cy.$",
        "descr": "Get elements in the graph matching a selector or a filter function.",
        "formats": [
            {
                "name": "cy.$",
                "descr": "Get elements in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector the elements should match."
                    }
                ]
            },
            {
                "name": "cy.elements",
                "descr": "Get elements in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector the elements should match."
                    }
                ]
            },
            {
                "name": "cy.nodes",
                "descr": "Get nodes in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector the nodes should match."
                    }
                ]
            },
            {
                "name": "cy.edges",
                "descr": "Get edges in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector the edges should match."
                    }
                ]
            },
            {
                "name": "cy.filter",
                "descr": "Get elements in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector the elements should match."
                    }
                ]
            },
            {
                "name": "cy.filter",
                "descr": "Get elements in the graph matching the specified filter function.",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The current element under consideration for filtering."
                            },
                            {
                                "name": "i",
                                "descr": "The counter used for iteration over the elements in the graph."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being filtered"
                            }
                        ],
                        "descr": "The filter function that returns true for elements that should be returned."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.style",
        "descr": "Get the entry point to modify the visual style of the graph after initialisation.",
        "formats": [
            {
                "descr": "Get the current style object."
            },
            {
                "descr": "Assign a new stylesheet to replace the existing one.",
                "args": [
                    {
                        "name": "stylesheet",
                        "descr": "Either a `cytoscape.stylesheet()` object, a string stylesheet, or a JSON stylesheet (the same formats accepted for [`options.style`](#style) at initialisation)."
                    }
                ]
            }
        ],
        "md": "cy/style"
    },
    {
        "name": "cy.autolock",
        "descr": "Get or set whether nodes are automatically locked (i.e. if `true`, nodes are locked despite their individual state).",
        "formats": [
            {
                "descr": "Get whether autolocking is enabled."
            },
            {
                "descr": "Set whether autolocking is enabled.",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables autolocking; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/autolock"
    },
    {
        "name": "cy.autoungrabify",
        "descr": "Get or set whether nodes are automatically ungrabified (i.e. if `true`, nodes are ungrabbale despite their individual state).",
        "formats": [
            {
                "descr": "Get whether autoungrabifying is enabled."
            },
            {
                "descr": "Set whether autoungrabifying is enabled.",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables autoungrabifying; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/autoungrabify"
    },
    {
        "name": "cy.autounselectify",
        "descr": "Get or set whether nodes are automatically unselectified (i.e. if `true`, nodes are ungrabbale despite their individual state).",
        "formats": [
            {
                "descr": "Get whether autounselectifying is enabled."
            },
            {
                "descr": "Set whether autounselectifying is enabled.",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables autounselectifying; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/autounselectify"
    },
    {
        "name": "cy.selectionType",
        "descr": "Get or set the selection type.  The `'single'` selection type is the default, tapping an element selects that element and deselects the previous elements.  The `'additive' selection type toggles the selection state of an element when tapped.`",
        "formats": [
            {
                "descr": "Get the selection type string."
            },
            {
                "descr": "Set the selection type.",
                "args": [
                    {
                        "name": "type",
                        "descr": "The selection type string; one of `'single'` (default) or `'additive'`."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.panningEnabled",
        "descr": "Get or set whether panning is enabled.",
        "formats": [
            {
                "descr": "Get whether panning is enabled."
            },
            {
                "descr": "Set whether panning is enabled",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables panning; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/panningEnabled"
    },
    {
        "name": "cy.userPanningEnabled",
        "descr": "Get or set whether panning by user events (e.g. dragging the graph background) is enabled.",
        "formats": [
            {
                "descr": "Get whether user panning is enabled."
            },
            {
                "descr": "Set whether user panning is enabled",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables panning; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/userPanningEnabled"
    },
    {
        "name": "cy.zoomingEnabled",
        "descr": "Get or set whether zooming is enabled.",
        "formats": [
            {
                "descr": "Get whether zooming is enabled."
            },
            {
                "descr": "Set whether zooming is enabled",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables zooming; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/zoomingEnabled"
    },
    {
        "name": "cy.userZoomingEnabled",
        "descr": "Get or set whether user zooming by user events (e.g. mouse wheel, pinch-to-zoom) is enabled.",
        "formats": [
            {
                "descr": "Get whether user zooming is enabled."
            },
            {
                "descr": "Set whether zooming is enabled",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables user zooming; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/userZoomingEnabled"
    },
    {
        "name": "cy.boxSelectionEnabled",
        "descr": "Get or set whether box selection is enabled. If enabled along with panning, the user must hold down one of shift, control, alt, or command to initiate box selection.",
        "formats": [
            {
                "descr": "Get whether box selection is enabled."
            },
            {
                "descr": "Set whether box selection is enabled.",
                "args": [
                    {
                        "name": "bool",
                        "descr": "A truthy value enables box selection; a falsey value disables it."
                    }
                ]
            }
        ],
        "md": "cy/boxSelectionEnabled"
    },
    {
        "name": "cy.pan",
        "descr": "Get or set the panning position of the graph.",
        "formats": [
            {
                "descr": "Get the current panning position."
            },
            {
                "descr": "Set the current panning position.",
                "args": [
                    {
                        "name": "renderedPosition",
                        "descr": "The rendered position to pan the graph to."
                    }
                ]
            }
        ],
        "md": "cy/pan"
    },
    {
        "name": "cy.panBy",
        "descr": "Relatively pan the graph by a specified rendered position vector.",
        "formats": [
            {
                "descr": "The rendered position",
                "args": [
                    {
                        "name": "renderedPosition",
                        "descr": "The rendered position vector to pan the graph by."
                    }
                ]
            }
        ],
        "md": "cy/panBy"
    },
    {
        "name": "cy.fit",
        "descr": "Pan and zooms the graph to fit to a collection.",
        "formats": [
            {
                "descr": "Fit to all elements in the graph."
            },
            {
                "descr": "Fit to the specified elements.",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The collection to fit to."
                    },
                    {
                        "name": "padding",
                        "descr": "An amount of padding (in rendered pixels) to have around the graph (default 0)."
                    }
                ]
            }
        ],
        "md": "cy/fit"
    },
    {
        "name": "cy.minZoom",
        "descr": "Get or set the minimum zoom level.",
        "formats": [
            {
                "descr": "Get the minimum zoom level."
            },
            {
                "descr": "Set the minimum zoom level.",
                "args": [
                    {
                        "name": "zoom",
                        "descr": "The new minimum zoom level to use."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.maxZoom",
        "descr": "Get or set the maximum zoom level.",
        "formats": [
            {
                "descr": "Get the maximum zoom level."
            },
            {
                "descr": "Set the maximum zoom level.",
                "args": [
                    {
                        "name": "zoom",
                        "descr": "The new maximum zoom level to use."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.zoom",
        "descr": "Get or set the zoom level of the graph.",
        "formats": [
            {
                "descr": "Get the zoom level."
            },
            {
                "descr": "Set the zoom level.",
                "args": [
                    {
                        "name": "level",
                        "descr": "The zoom level to set."
                    }
                ]
            },
            {
                "descr": "Set the zoom level.",
                "args": [
                    {
                        "name": "options",
                        "fields": [
                            {
                                "name": "level",
                                "descr": "The zoom level to set."
                            },
                            {
                                "name": "position",
                                "descr": "The position about which to zoom."
                            },
                            {
                                "name": "renderedPosition",
                                "descr": "The rendered position about which to zoom."
                            }
                        ],
                        "descr": "The options for zooming."
                    }
                ]
            }
        ],
        "md": "cy/zoom"
    },
    {
        "name": "cy.viewport",
        "descr": "Set the viewport state (pan & zoom) in one call.",
        "formats": [
            {
                "descr": "Set viewport",
                "args": [
                    {
                        "name": "zoom",
                        "descr": "The zoom level to set."
                    },
                    {
                        "name": "pan",
                        "descr": "The pan to set (a rendered position)."
                    }
                ]
            }
        ],
        "md": "cy/viewport"
    },
    {
        "name": "cy.center",
        "pureAliases": [
            "cy.centre"
        ],
        "descr": "Pan the graph to the centre of a collection.",
        "formats": [
            {
                "descr": "Centre on all elements in the graph."
            },
            {
                "descr": "Centre on the specified elements.",
                "args": [
                    {
                        "name": "eles",
                        "descr": "The collection to centre upon."
                    }
                ]
            }
        ],
        "md": "cy/center"
    },
    {
        "name": "cy.reset",
        "descr": "Reset the graph to the default zoom level and panning position.",
        "md": "cy/reset"
    },
    {
        "name": "cy.width",
        "descr": "Get the on-screen width of the viewport in pixels."
    },
    {
        "name": "cy.height",
        "descr": "Get the on-screen height of the viewport in pixels."
    },
    {
        "name": "cy.extent",
        "descr": "Get the extent of the viewport, a bounding box in model co-ordinates that lets you know what model positions are visible in the viewport.",
        "md": "cy/extent"
    },
    {
        "name": "ani.play",
        "pureAliases": [
            "ani.run"
        ],
        "descr": "Requests that the animation be played, starting on the next frame. If the animation is complete, it restarts from the beginning.",
        "md": "ani/play"
    },
    {
        "name": "ani.playing",
        "pureAliases": [
            "ani.running"
        ],
        "descr": "Get whether the animation is currently playing."
    },
    {
        "name": "ani.apply",
        "descr": "Apply the animation at its current progress.",
        "md": "ani/apply"
    },
    {
        "name": "ani.applying",
        "descr": "Get whether the animation is currently applying."
    },
    {
        "name": "ani.pause",
        "descr": "Pause the animation, maintaining the current progress.",
        "md": "ani/pause"
    },
    {
        "name": "ani.stop",
        "descr": "Stop the animation, maintaining the current progress and removing the animation from any associated queues.",
        "md": "ani/stop"
    },
    {
        "name": "ani.progress",
        "descr": "Get or set how far along the animation has progressed.",
        "formats": [
            {
                "name": "ani.progress",
                "descr": "Get the progress of the animation in percent."
            },
            {
                "name": "ani.progress",
                "descr": "Set the progress of the animation in percent.",
                "args": [
                    {
                        "name": "progress",
                        "descr": "The progress in percent (i.e. between 0 and 1 inclusive) to set to the animation."
                    }
                ]
            },
            {
                "name": "ani.time",
                "descr": "Get the progress of the animation in milliseconds."
            },
            {
                "name": "ani.time",
                "descr": "Set the progress of the animation in milliseconds.",
                "args": [
                    {
                        "name": "time",
                        "descr": "The progress in milliseconds (i.e. between 0 and the duration inclusive) to set to the animation."
                    }
                ]
            },
            {
                "name": "ani.rewind",
                "descr": "Rewind the animation to the beginning."
            },
            {
                "name": "ani.fastforward",
                "descr": "Fastforward the animation to the end."
            }
        ],
        "md": "ani/progress"
    },
    {
        "name": "ani.completed",
        "pureAliases": [
            "ani.complete"
        ],
        "descr": "Get whether the animation has progressed to the end."
    },
    {
        "name": "ani.reverse",
        "descr": "Reverse the animation such that its starting conditions and ending conditions are reversed.",
        "md": "ani/reverse"
    },
    {
        "name": "ani.promise",
        "descr": "Get a promise that is fulfilled with the specified animation event.",
        "formats": [
            {
                "descr": "Get a promise that is fulfilled with the next `completed` event."
            },
            {
                "descr": "Get a promise that is fulfilled with the specified animation event.",
                "args": [
                    {
                        "name": "animationEvent",
                        "descr": "A string for the event name; `completed` or `complete` for completing the animation or `frame` for the next frame of the animation."
                    }
                ]
            }
        ],
        "md": "ani/promise"
    }
]